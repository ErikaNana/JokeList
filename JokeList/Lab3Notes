Layout inflation happens when Android takes a static layout XML file and interprets it
in a special way, turning the raw XML into part o the app's actual UI.  You won't be
able to retrieve references to UI controls until the layout has been inflated from XML
file.  That's why need to call setContentView first.

Building Custom UI Components
-------------------------------
-Sometimes standard View library will not supply functionality that you need
-therefore define your own UI components
	-create a custom component from scratch
	-modify an existing component
	-combine existing components to create a compound component
	
This lab: using the third approach
	-create a graphical representation of a Joke --> JokeView
	-JokeView composed of a TextView and a RadioGroup, with two RadioButton children
	-RadioButtons will show custom icons
	-custom icons ---> res/drawable-*dpi
	
-create the State List selectors to enable use of multiple custom icons on each 
RadioButton component

State Lists
------------
Act as state machines
	-provide logic for the appearance of a set of images (one at a time) on a single
	component
	-use them to make each RadioButton display a fully colored emote when it is selected
	and a more faded emote when not selected
	-example:
		-selecting green emote will cause it to become fully colored and red faded
		-selecting red emote will cause it to become fully colored and green faded
	-----> use selector XML object type
-the order of the items in the State List is important
	-Android uses the last selector item as the default drawable resource shown if none
	of the other items' conditions are met
	
Difference between padding and margins
----------------------------------------
http://stackoverflow.com/questions/4619899/difference-between-a-views-padding-and-margin

Creating a compound component
------------------------------
after established layout, you want your component class to extend the class of the root
ViewGroup in your layout (likely LinearLayout).  Then component class then becomes a special
subclass of that ViewGroup

-in this lab, custom component class is JokeView.java

OnCheckedChangeListener
------------------------
without the OnCheckedChangeListener, joke ratings would be lost when doing other
things on the Android such as summoning and dismissing the onscreen keyboard

Adapters and AdapterViews
----------------------------
AdapterView = View class that allows us to bind one or more Views to a dataset
	-this binding takes care of responding to user selections as well as populating the 
	AdapterView with data
Adapter
	-performs the binding
	-it is responsible for keeping track of the selection and supplying the AdapterView with 
	a View object representation of each item in the dataset
	
In this context
----------------
AdapterView = scrollable vertical ViewGroup called a ListView
dataset = ArrayList of Joke objects
Adapter class = JokeListAdapter
	-contains a reference to list of Joke objects and supplies ListView with a JokeView for 
	each of them

BaseAdapter
------------
BaseAdapter class
	-common base class of common implementation for an Adapter that can be used in both 
	ListView(by implementing the specialized ListAdapter interface) and spinner by 
	implementing the specialized SpinnerAdapter interface
	
ListView class
---------------
ListView = a view group that displays a list of scrollable items
-the list items are automatically inserted to the list using an Adapter that pulls content from
a source such as an array or a database query and converts each item result into a view that's
placed into the list
-includes built in scrolling and child View management options
	-allows control over child view selection behavior
	
AddJoke method
--------------
don't need to initialize a new JokeView and add it to the layout because Adapter now handles it
for you

Menus
-----
Two different types of menus that you will work with
	-Action Bar (replaces the Options Menu)
	-Context Menus (replace floating Context Menus with Contextual Action Mode)
	
Numerous changes to menus
	-starting with Honeycomb (API 11, Android 3.0) devices are no longer required to have
	a physical Menu button
	-instead, devices using Honeycomb or higher use the Action Bar to display menu options
	using a combo of on-screen actions and overflow actions
	
Since developing for minimum of API 10, must consider backwards compatibility
ActionBar class is not available in API 10 or lower, but wish to create an application that 
looks the same across multiple versions of Android

How to implement backwards-compatible menus
-------------------------------------------
ActionBarSherlock -> an extension of the Google compatibility solution and provides an 
ActionBar and its features across all Android versions
-easy, and flexible in providing a custom implementation of the Action bar if the native
version of Android does not provide it
-need to download ABS set up ABS as an Eclipse library project which will be referenced
in Eclipse ANdroid app project

ActionBarSherlock uses the same steps to create the Action Bar as is detailed in the
Android Menus walkthrough (http://developer.android.com/guide/topics/ui/menus.html), 
only using different imports

Set android:showAsAction
-------------------------
make the menu item show up only if there is room in the menu, and to provide the title
text for this item in the Action bar
-this prevents the Action Bar from trying to fit too many menu items inside itself; if there
is no room in the Action Bar for a menu item, it will be placed either in the overflow menu
(Android 3.0 and higher) or in the options menu displayed when pressing the physical Menu
button (Android 2.3 and lower)

Toast Notifications
--------------------
visual feedback for debugging
-toasts create a condensed text popup that appears briefly on screen before disappearing
-you can create and modify Toast variables, but creating and displaying a toast all at once
	-just use one line
	Toast.makeText(context, text, duration).show();
		-context = Almost always this, or context obtained via getContext(), etc
		-text = A string to display on the screen
		-duration = how long the Toast is displayed on the screen
			-Toast.LENGTH_LONG, Toast.LENGTH_SHORT
-Use a Toast notification to show minimal menu feedback as a sanity check to make sure the
menu item responds correctly

To Delete a Joke in the List
-----------------------------
Can't add it as Action Bar menu item because it is not clear which Joke is implemented
-instead
	-create a contextual menu that appears when certain components (JokeViews) are selected
	by the user, with a single option to remove the selected Joke from the list
Two ways to provide Contextual Menus
	-Floating context menus
	-Contextual Action Mode (CAM)
		-working with this in the lab
		-only available on Android 3.0 or higher
			-however, can make it work on older devices with help from ActionBarSherlock
	-enable Contextual Action Mode for individual views
		-ideally we would want batch contextual actions
		-this would allow for selecting multiple JokeViews inside the ListView and marking
		them for removal, but only enabled on API 11 and higher
		-use Action Mode to enable a selection menu to appear whenever a JokeView is long-
		clicked.  Long click for giving user room for error in touching small rating buttons
		
For the LongClickListener
--------------------------
Returns a boolean which specifies whether Android should continue to propagate the click event
	-if return true, then telling Android that you handled the event and nobody else should
	know about the long-press
	-if return false, Android will still call other handlers
-since long-press events typically do not perform the same action as a regular press,
better to return true to stop event propagation
		
			













	











		 